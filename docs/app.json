[{"name":"app.R","content":"library(shiny)\nlibrary(leaflet)\nlibrary(xml2)\nlibrary(lubridate)\nlibrary(ggplot2)\n\n# Define contrasting colors\nCONTRASTING_COLORS <- c(\"#FF0000\", \"#00FF00\", \"#0000FF\", \"#FF00FF\", \"#00FFFF\", \"#FFFF00\", \"#800000\", \"#008000\", \"#000080\", \"#800080\")\n\nui <- fluidPage(\n  titlePanel(\"TCX Data Viewer\"),\n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"tcx_files\", \"Upload TCX file(s)\", accept = \".tcx\", multiple = TRUE),\n      uiOutput(\"file_info\")\n    ),\n    mainPanel(\n      leafletOutput(\"map\", height = \"400px\"),\n      plotOutput(\"heart_rate_plot\", height = \"400px\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  tcx_data <- reactiveVal(list())\n  \n  observeEvent(input$tcx_files, {\n    req(input$tcx_files)\n    processed_data <- list()\n    \n    for (i in seq_along(input$tcx_files$datapath)) {\n      file <- input$tcx_files$datapath[i]\n      filename <- input$tcx_files$name[i]\n      \n      tryCatch({\n        tcx <- read_xml(file)\n        \n        # Extract data\n        times <- as.POSIXct(xml_text(xml_find_all(tcx, \"//ns:Time\", ns = c(ns = \"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"))), format = \"%Y-%m-%dT%H:%M:%OS\", tz = \"UTC\")\n        lats <- as.numeric(xml_text(xml_find_all(tcx, \"//ns:LatitudeDegrees\", ns = c(ns = \"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"))))\n        lons <- as.numeric(xml_text(xml_find_all(tcx, \"//ns:LongitudeDegrees\", ns = c(ns = \"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"))))\n        heart_rates <- as.numeric(xml_text(xml_find_all(tcx, \"//ns:HeartRateBpm/ns:Value\", ns = c(ns = \"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"))))\n        \n        # Calculate duration in seconds\n        duration_seconds <- as.numeric(difftime(max(times), min(times), units = \"secs\"))\n        \n        processed_data[[filename]] <- list(\n          times = times,\n          lats = lats,\n          lons = lons,\n          heart_rates = heart_rates,\n          start_time = min(times),\n          duration = duration_seconds,\n          max_hr = max(heart_rates),\n          color = CONTRASTING_COLORS[(i - 1) %% length(CONTRASTING_COLORS) + 1]\n        )\n      }, error = function(e) {\n        processed_data[[filename]] <- list(error = paste(\"Error processing TCX data:\", e$message))\n      })\n    }\n    \n    tcx_data(processed_data)\n  })\n  \n  output$file_info <- renderUI({\n    data <- tcx_data()\n    if (length(data) == 0) {\n      return(p(\"Please upload TCX file(s).\"))\n    }\n    \n    info_html <- \"<h3>Data Information:<\/h3>\"\n    for (filename in names(data)) {\n      file_data <- data[[filename]]\n      if (\"error\" %in% names(file_data)) {\n        info_html <- paste0(info_html, sprintf(\"<p><strong>%s:<\/strong> Error: %s<\/p>\", filename, file_data$error))\n      } else {\n        # Format duration as HH:MM:SS\n        duration_formatted <- sprintf(\"%02d:%02d:%02d\", \n                                      file_data$duration %/% 3600, \n                                      (file_data$duration %% 3600) %/% 60, \n                                      file_data$duration %% 60)\n        \n        info_html <- paste0(info_html, sprintf(\n          \"<p><strong>%s:<\/strong><br>Date: %s<br>Duration: %s<br>Maximum Heart Rate: %d bpm<\/p>\",\n          filename,\n          format(file_data$start_time, \"%Y-%m-%d %H:%M:%S\"),\n          duration_formatted,\n          file_data$max_hr\n        ))\n      }\n    }\n    \n    HTML(info_html)\n  })\n  \n  output$map <- renderLeaflet({\n    data <- tcx_data()\n    if (length(data) == 0) {\n      return(NULL)\n    }\n    \n    m <- leaflet() %>% addTiles()\n    \n    for (filename in names(data)) {\n      file_data <- data[[filename]]\n      if (!\"error\" %in% names(file_data)) {\n        m <- m %>%\n          addPolylines(\n            lat = file_data$lats,\n            lng = file_data$lons,\n            color = file_data$color,\n            weight = 2.5,\n            opacity = 0.8,\n            popup = filename\n          ) %>%\n          addCircleMarkers(\n            lat = file_data$lats[1],\n            lng = file_data$lons[1],\n            radius = 6,\n            color = \"green\",\n            fillOpacity = 1,\n            popup = paste(\"Start -\", filename)\n          ) %>%\n          addCircleMarkers(\n            lat = file_data$lats[length(file_data$lats)],\n            lng = file_data$lons[length(file_data$lons)],\n            radius = 6,\n            color = \"red\",\n            fillOpacity = 1,\n            popup = paste(\"End -\", filename)\n          )\n      }\n    }\n    \n    m\n  })\n  \n  output$heart_rate_plot <- renderPlot({\n    data <- tcx_data()\n    if (length(data) == 0) {\n      return(NULL)\n    }\n    \n    plot_data <- data.frame()\n    \n    for (filename in names(data)) {\n      file_data <- data[[filename]]\n      if (!\"error\" %in% names(file_data)) {\n        time_diff <- as.numeric(difftime(file_data$times, file_data$times[1], units = \"secs\"))\n        plot_data <- rbind(plot_data, data.frame(\n          time = time_diff,\n          heart_rate = file_data$heart_rates,\n          filename = filename,\n          color = file_data$color\n        ))\n      }\n    }\n    \n    ggplot(plot_data, aes(x = time / 60, y = heart_rate, color = filename)) +\n      geom_line() +\n      scale_color_manual(values = setNames(plot_data$color, plot_data$filename)) +\n      labs(x = \"Time (minutes)\", y = \"Heart Rate (bpm)\", title = \"Heart Rate Over Time\") +\n      theme_minimal() +\n      theme(legend.position = \"bottom\")\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"},{"name":"README.md","content":"# 2024_scgis_tcx_webr","type":"text"},{"name":"requirements.txt","content":"shiny\nleaflet\nXML\nlubridate\nggplot2\n","type":"text"}]
